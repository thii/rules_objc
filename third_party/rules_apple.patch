diff --git c/apple/ios.bzl i/apple/ios.bzl
index eee6c74..96777ee 100644
--- c/apple/ios.bzl
+++ i/apple/ios.bzl
@@ -14,6 +14,7 @@
 
 """Bazel rules for creating iOS applications and bundles."""
 
+load("@//objc:objc.bzl", "apple_static_library")
 load(
     "@build_bazel_rules_apple//apple/internal/testing:apple_test_assembler.bzl",
     "apple_test_assembler",
@@ -165,7 +166,7 @@ def ios_static_framework(name, **kwargs):
     deps = kwargs.get("deps")
     apple_static_library_name = "%s.apple_static_library" % name
 
-    native.apple_static_library(
+    apple_static_library(
         name = apple_static_library_name,
         deps = deps,
         avoid_deps = avoid_deps,
diff --git c/apple/tvos.bzl i/apple/tvos.bzl
index a2d0b34..9bf39be 100644
--- c/apple/tvos.bzl
+++ i/apple/tvos.bzl
@@ -14,6 +14,7 @@
 
 """Bazel rules for creating tvOS applications and bundles."""
 
+load("@//objc:objc.bzl", "apple_static_library")
 load(
     "@build_bazel_rules_apple//apple/internal/testing:apple_test_assembler.bzl",
     "apple_test_assembler",
@@ -113,7 +114,7 @@ def tvos_static_framework(name, **kwargs):
     deps = kwargs.get("deps")
     apple_static_library_name = "%s.apple_static_library" % name
 
-    native.apple_static_library(
+    apple_static_library(
         name = apple_static_library_name,
         deps = deps,
         avoid_deps = avoid_deps,
diff --git c/apple/watchos.bzl i/apple/watchos.bzl
index 34ba804..1249d6a 100644
--- c/apple/watchos.bzl
+++ i/apple/watchos.bzl
@@ -14,6 +14,7 @@
 
 """Bazel rules for creating watchOS applications and bundles."""
 
+load("@//objc:objc.bzl", "apple_static_library")
 load(
     "@build_bazel_rules_apple//apple/internal/testing:build_test_rules.bzl",
     "apple_build_test_rule",
@@ -126,7 +127,7 @@ def watchos_static_framework(name, **kwargs):
     deps = kwargs.get("deps")
     apple_static_library_name = "%s.apple_static_library" % name
 
-    native.apple_static_library(
+    apple_static_library(
         name = apple_static_library_name,
         deps = deps,
         avoid_deps = avoid_deps,
diff --git c/test/starlark_tests/resources/BUILD i/test/starlark_tests/resources/BUILD
index 1515dd5..ef0ac8b 100644
--- c/test/starlark_tests/resources/BUILD
+++ i/test/starlark_tests/resources/BUILD
@@ -1,4 +1,4 @@
-load("@rules_cc//cc:defs.bzl", "objc_library")
+load("@//objc:objc.bzl", "objc_library")
 load(
     "//apple:resources.bzl",
     "apple_bundle_import",
diff --git c/test/starlark_tests/targets_under_test/ios/BUILD i/test/starlark_tests/targets_under_test/ios/BUILD
index af25a4e..bb84084 100644
--- c/test/starlark_tests/targets_under_test/ios/BUILD
+++ i/test/starlark_tests/targets_under_test/ios/BUILD
@@ -1,4 +1,4 @@
-load("@rules_cc//cc:defs.bzl", "objc_library")
+load("@//objc:objc.bzl", "objc_library")
 load(
     "//apple:ios.bzl",
     "ios_app_clip",
diff --git c/test/starlark_tests/targets_under_test/macos/BUILD i/test/starlark_tests/targets_under_test/macos/BUILD
index a36a93a..6cf6acb 100644
--- c/test/starlark_tests/targets_under_test/macos/BUILD
+++ i/test/starlark_tests/targets_under_test/macos/BUILD
@@ -1,4 +1,4 @@
-load("@rules_cc//cc:defs.bzl", "objc_library")
+load("@//objc:objc.bzl", "objc_library")
 load(
     "//apple:macos.bzl",
     "macos_application",
diff --git c/test/starlark_tests/targets_under_test/tvos/BUILD i/test/starlark_tests/targets_under_test/tvos/BUILD
index 50ba344..1cd86e1 100644
--- c/test/starlark_tests/targets_under_test/tvos/BUILD
+++ i/test/starlark_tests/targets_under_test/tvos/BUILD
@@ -1,4 +1,4 @@
-load("@rules_cc//cc:defs.bzl", "objc_library")
+load("@//objc:objc.bzl", "objc_library")
 load(
     "//apple:tvos.bzl",
     "tvos_application",
diff --git c/test/starlark_tests/targets_under_test/watchos/BUILD i/test/starlark_tests/targets_under_test/watchos/BUILD
index 582bb89..be2da5b 100644
--- c/test/starlark_tests/targets_under_test/watchos/BUILD
+++ i/test/starlark_tests/targets_under_test/watchos/BUILD
@@ -1,4 +1,4 @@
-load("@rules_cc//cc:defs.bzl", "objc_library")
+load("@//objc:objc.bzl", "objc_library")
 load(
     "//apple:ios.bzl",
     "ios_application",
diff --git c/test/testdata/binaries/BUILD i/test/testdata/binaries/BUILD
index 79d95e6..1c2a85b 100644
--- c/test/testdata/binaries/BUILD
+++ i/test/testdata/binaries/BUILD
@@ -1,4 +1,4 @@
-load("@rules_cc//cc:defs.bzl", "objc_library")
+load("@//objc:objc.bzl", "apple_static_library", "objc_library")
 load(
     "//apple:apple_binary.bzl",
     "apple_binary",
diff --git i/test/starlark_tests/rules/dsyms_test.bzl w/test/starlark_tests/rules/dsyms_test.bzl
index 4625dc7..a89151f 100644
--- i/test/starlark_tests/rules/dsyms_test.bzl
+++ w/test/starlark_tests/rules/dsyms_test.bzl
@@ -59,6 +59,17 @@ def _dsyms_test_impl(ctx):
             for x in ctx.attr.expected_dsyms
         ]
 
+    workspace = target_under_test.label.workspace_name
+    if workspace != "":
+        expected_infoplists = [
+            paths.join("..", workspace, x)
+            for x in expected_infoplists
+        ]
+        expected_binaries = [
+            paths.join("..", workspace, x)
+            for x in expected_binaries
+        ]
+
     for expected in expected_infoplists + expected_binaries:
         asserts.true(
             env,
diff --git i/test/starlark_tests/rules/linkmap_test.bzl w/test/starlark_tests/rules/linkmap_test.bzl
index 0f197bd..3652559 100644
--- i/test/starlark_tests/rules/linkmap_test.bzl
+++ w/test/starlark_tests/rules/linkmap_test.bzl
@@ -48,17 +48,20 @@ def _linkmap_test_impl(ctx):
     target_name = target_under_test.label.name
     linkmap_name = "{}_{}.linkmap".format(target_name, architecture)
 
-    expected_linkmaps = [paths.join(package, linkmap_name)]
+    expected_linkmap = paths.join(package, linkmap_name)
 
-    for expected in expected_linkmaps:
-        asserts.true(
-            env,
-            expected in outputs,
-            msg = "Expected\n\n{0}\n\nto be built. Contents were:\n\n{1}\n\n".format(
-                expected,
-                "\n".join(outputs.keys()),
-            ),
-        )
+    workspace = target_under_test.label.workspace_name
+    if workspace != "":
+        expected_linkmap = paths.join("..", workspace, expected_linkmap)
+
+    asserts.true(
+        env,
+        expected_linkmap in outputs,
+        msg = "Expected\n\n{0}\n\nto be built. Contents were:\n\n{1}\n\n".format(
+            expected_linkmap,
+            "\n".join(outputs.keys()),
+        ),
+    )
 
     return analysistest.end(env)
 
diff --git i/test/starlark_tests/rules/output_text_match_test.bzl w/test/starlark_tests/rules/output_text_match_test.bzl
index a5e46f1..ca39e24 100644
--- i/test/starlark_tests/rules/output_text_match_test.bzl
+++ w/test/starlark_tests/rules/output_text_match_test.bzl
@@ -18,6 +18,10 @@ load(
     "@bazel_skylib//lib:dicts.bzl",
     "dicts",
 )
+load(
+    "@bazel_skylib//lib:paths.bzl",
+    "paths",
+)
 
 def _output_text_match_test_impl(ctx):
     """Implementation of the `output_text_match_test` rule."""
@@ -49,10 +53,14 @@ def _output_text_match_test_impl(ctx):
 
     # Generate a script that uses the regex matching assertions from
     # unittest.bash to verify the matches (or not-matches) in the outputs.
+    unittest_bash_path = "test/unittest.bash"
+    workspace = target_under_test.label.workspace_name
+    if workspace != "":
+        unittest_bash_path = paths.join("..", workspace, unittest_bash_path)
     generated_script = [
         "#!/usr/bin/env bash",
         "set -euo pipefail",
-        "source test/unittest.bash",
+        "source {}".format(unittest_bash_path),
     ]
     for path_suffix, patterns in ctx.attr.files_match.items():
         for pattern in patterns:
